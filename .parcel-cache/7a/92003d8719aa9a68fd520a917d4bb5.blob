"use strict";

require("core-js/modules/web.immediate.js");
var modal = _interopRequireWildcard(require("./modal.js"));
var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));
var _searchView = _interopRequireDefault(require("./views/searchView.js"));
var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));
var _addRecipeView = _interopRequireDefault(require("./views/addRecipeView.js"));
var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));
var _bookmarkView = _interopRequireDefault(require("./views/bookmarkView.js"));
var _config = require("./config.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// import icons from '../img/icons.svg'; // Parcel 1
//import icons from 'url:../img/icons.svg'; // Parcel 1

if (module.hot) {
  module.hot.accept();
}

// https://forkify-api.herokuapp.com/v2

///////////////////////////////////////
//028a4ef3-6bc2-42e9-943b-d4e640cfe91e

const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    // 1. Loading recipe
    _recipeView.default.renderSpinner();

    // 0) Update results view to mark selected search result
    _resultsView.default.update(modal.getSearchResultsPage());

    //debugger;
    // 1) Updating bookmarks
    _bookmarkView.default.update(modal.state.bookmarks);

    // 2) Loading recipe
    await modal.loadRecipe(id);

    // 3) Rendering recipe
    _recipeView.default.render(modal.state.recipe);
  } catch (err) {
    _recipeView.default.renderError();
    console.error(err);
  }
};
const controlSearchResults = async function () {
  try {
    _resultsView.default.renderSpinner();

    // 1) Get search query
    const query = _searchView.default.getQuery();
    if (!query) return;

    // 2) Load search results
    await modal.loadSearchResults(query);

    // 3) Render results
    // resultsView.render(modal.state.search.results);
    _resultsView.default.render(modal.getSearchResultsPage());

    // 4) Render initial pagination
    _paginationView.default.render(modal.state.search);
  } catch (err) {
    console.error(err.message);
    _resultsView.default.renderError();
  }
};
const controlPagination = function (gotoPage) {
  _resultsView.default.render(modal.getSearchResultsPage(gotoPage));
  _paginationView.default.render(modal.state.search);
};
const controlServings = function (newServings) {
  modal.updateServings(newServings);

  // recipeView.render(modal.state.recipe);
  _recipeView.default.update(modal.state.recipe);
};
const controlAddBookmark = function () {
  // 1) Add/remove bookmark
  if (!modal.state.recipe.bookmarked) modal.addBookmark(modal.state.recipe);else modal.deleteBookmark(modal.state.recipe.id);

  // 2) Update recipe view
  _recipeView.default.update(modal.state.recipe);

  // 3) Render bookmarks
  _bookmarkView.default.render(modal.state.bookmarks);
};
const controlBookmarks = function () {
  _bookmarkView.default.render(modal.state.bookmarks);
};
const controlAddRecipe = async function (newRecipe) {
  try {
    _addRecipeView.default.renderSpinner();
    // Upload the new recipe
    await modal.uploadRecipe(newRecipe);

    // Render recipe
    _recipeView.default.render(modal.state.recipe);

    // Succsess message
    _addRecipeView.default.renderMessage();

    // Render bookmark view
    _bookmarkView.default.render(modal.state.bookmarks);

    // Change ID in URL
    window.history.pushState(null, '', `#${modal.state.recipe.id}`);

    // Close form window
    setTimeout(function () {
      _addRecipeView.default.toggleWindow();
    }, _config.MODAL_CLOSE_SEC * 1000);
  } catch (err) {
    console.error(err);
    _addRecipeView.default.renderError(err.message);
  }
};
const init = function () {
  _bookmarkView.default.addHandlerRender(controlBookmarks);
  _recipeView.default.addHandlerRender(controlRecipes);
  _recipeView.default.addHandlerUpdateServings(controlServings);
  _searchView.default.addHandlerSearch(controlSearchResults);
  _paginationView.default.addHandlerClick(controlPagination);
  _recipeView.default.addHandlerAddBookmark(controlAddBookmark);
  _addRecipeView.default.addHandlerUpload(controlAddRecipe);
};
init();